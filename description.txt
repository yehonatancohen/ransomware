so the idea was malware.
The first thing was the malware script, We started by deciding what do we need for the malware to work and the steps for it to take over the victim's computer.
So the first thing we need to do is generate a private and public key that will be used for all the victims, the public key for encrypting the victim's symmetric key, and a private key for releasing the encrypted symmetric key.
So we generated our keys once using RSA.
Next, when the malware program starts we want to generate a key for the victim, we did that using a library called "Fernet" which generates a random 32 bytes long string and encodes it to base64.
After we have the symmetric key we want to encrypt all the files on the Users directory using this key, so we took the root path of the user and started from the top to the bottom.
Now the reason we did it for the user path is that it's the most logical approach. If we encrypt some of the windows files, the pc might not function correctly, and all of the important files for the user will be saved under the user directory.
once the files are encrypted we wanted to leave a "Mark" on the computer so we changed the background image to a special photo.
we did that by uploading the background image we want to use to a website called imgbb that hosts images online.
Once that is done and we are done messing with the computer, we want to encrypt the symmetric key and send it to the server. so using the RSA encryption and the public key that we download from the internet we will encrypt the fernet key, write it to a file, and send the file to a channel called upload_key that belongs to the server using a requests.post() method.
Now to the server, we wanted the server to run well before deploying online so we created a flask app that communicates with HTML templates through multiple channels and we succeeded.
there are 3 channels, the first one is the main one, which shows the explanation of what happened to the victim and also shows how to fix it, using an input system in the HTML source the browser displays a credit card screen with the required fields that the user has to enter to continue.
after the user presses submit it transfers him to the 2nd channel called dec_key which if the transaction was completed successfully the server will receive the encrypted key file from the s3 bucket, decrypt the key file, and return it in the form of a file.
While all of this is happening the malware is still running in the background with a thread searching for the decrypted key file that the user will download from the server, once it has found it, the malware will start decrypting the encrypted files. The third channel is upload_key, you heard the name before because this is where the malware sent their encrypted fernet key. we receive it in this channel and save it locally to the server in a form of a file. From there we upload the file to an s3 bucket to save it there.
Now, this is one of the most difficult problems we have faced in this project. how do we connect each encrypted key file in the s3 bucket that we upload, to the victim that we want to return to them the decrypted fernet key?
So after a lot of thinking, we came up with the solution, we will use UUID for each victim and transfer the UUID between the channels in the URL parameters.
When the malware opens the browser to upload the encrypted fernet key, we will open it with the UUID in the URL parameters, the victim will pass the file to the server side, we will receive the file, call it the UUID that's in the parameters and upload it to the s3 bucket with the UUID as the name of the file. after that we will continue to move around the UUID of the victim with every interaction that he makes up until the dec_key when we return the decrypted key back, we have at this point his UUID so we will download from the s3 bucket a file with his UUID as the name and return it to him.
After that, we are all set and the last part is to upload the server to the internt. we looked through what is the best and most efficient way of establishing a running server for this project that functions well with the material we learned up until now. we learned about Flask, and the best way to work with Flask and with servers, in general, is AWS., and more specifically lightsail.
So lightsail works like this, it has a container service and each container is capable of saving multiple images into it and running one image. so we used docker for the container service, we created a docker file for the app code, and using that we created an image that contains the app and the server directory, as well as a container that runs this whole thing.
Once the container is running we uploaded it to lightsail using AWS command line interface(or AWS CLI) and the lightsail plugin.
The container is on lightsail! so last thing to do is to deploy this image, so we used port 5000 and the flask run command, and just like that we have a server running!
So let's show the order of things:
malware running -> encrypting files -> encrypting fernet key -> sending the encrypted key to server with the UUID in the URL parameters-> server receiving the key and uploading it to s3 bucket in a form of a file and the name of the file is the UUID of the victim -> malware opens a web browser in the server side with the UUID in the URL parameters -> server receive the UUID and the payment -> process it -> downloads from s3 bucket a file using the UUID -> return to the victim his decrypted key -> user downloads the file -> malware detects file in the downloads directory and start decrypting the computer.
after that is finished time to wrap up the malware with an executable, we will use pyinstaller to turn the malware to exe and thats it.